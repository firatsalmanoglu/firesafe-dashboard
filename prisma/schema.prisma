generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



//ADMIN // MÜŞTERİ // SERVİS SAĞLAYICI  
model Users {
  id                  Int @id @default(autoincrement())
  userName            String @unique
  password            String
  firstName           String
  lastName            String
  bloodType           UserBloodType
  birthday            DateTime
  sex                 UserSex
  photo               String?
  email               String
  phone               String
  registrationDate    DateTime @default (now())
  
  institutionId       Int
  institution         Institutions @relation(fields: [institutionId], references: [id]) // İlişki Tanımı

  roleId              Int  
  role                Roles @relation(fields: [roleId], references: [id]) // İlişki Tanımı


  ProviderDevices Devices[] @relation("Provider")

  OwnerDevices Devices[] @relation("Owner")

  CreatorOfferCards OfferCards[] @relation("Creator")

  RecipientOfferCards OfferCards[] @relation("Recipient")

  ProviderMaintenanceCards MaintenanceCards[] @relation("Provider")

  CustomerMaintenanceCards MaintenanceCards[] @relation("Customer")

  CreatorAppointments Appointments[] @relation("AppCreator")

  ProviderAppointments Appointments[] @relation("AppRecipient")

  CreatorNotifications Notifications[] @relation("NotCreator")
  RecipientNotifications Notifications[] @relation("NotRecipient")

  Logs Logs[]

  CreatorAnnouncements Announcements[] @relation("AnnCreator")

  RecipientAnnouncements Announcements[] @relation("AnnRecipient")
}

// ŞİRKETLER
model Institutions {
  id                  Int @id @default(autoincrement())
  name                String
  address             String
  email               String
  phone               String
  registrationDate    DateTime @default (now())


  Users Users[]

  ProviderInsDevices Devices[] @relation("ProviderIns")

  OwnerInsDevices Devices[] @relation("OwnerIns")

  CreatorInsOfferCards OfferCards[] @relation("CreatorIns")

  RecipientInsOfferCards OfferCards[] @relation("RecipientIns")

  ProviderInsMaintenanceCards MaintenanceCards[] @relation("ProviderIns")

  CustomerInsMaintenanceCards MaintenanceCards[] @relation("CustomerIns")

  CreatorInsAppointments Appointments[] @relation("AppCreatorIns")

  RecipientInsAppointments Appointments[] @relation("AppRecipientIns")

  CreatorInsNotifications Notifications[] @relation("NotCreatorIns")

  RecipientInsNotifications Notifications[] @relation("NotRecipientIns")

  CreatorAnnouncements Announcements[] @relation("AnnCreatorIns")

  RecipientAnnouncements Announcements[] @relation("AnnRecipientInst")

  IsgMembers IsgMembers[]
}

//ROLLER Admin- I. Seviye Müşteri- II. Seviye Müşteri- I. Seviye Hizmet Sağlayıcı-  II. Seviye Hizmet Sağlayıcı
model Roles {
  id                  Int @id @default(autoincrement())
  name                String


  Users Users[]
}

//CİHAZLAR Yangın Tüpü - Sprinkler vs
model Devices {
  id                  Int @id @default(autoincrement())
  serialNumber        String @unique
  qrcode              String @unique
  productionDate      DateTime
  lastControlDate     DateTime
  expirationDate      DateTime
  nextControlDate     DateTime
  location            String
  photo               String?
  currentStatus       DeviceStatus
  typeId              Int
  type                DeviceTypes @relation(fields: [typeId], references: [id]) // İlişki Tanımı

  featureId           Int
  feature             DeviceFeatures @relation(fields: [featureId], references: [id]) // İlişki Tanımı

  ownerId             Int 
  owner               Users @relation("Owner",fields: [ownerId], references: [id]) // İlişki Tanımı

  ownerInstId         Int 
  ownerIns            Institutions @relation("OwnerIns",fields: [ownerInstId], references: [id]) // İlişki Tanımı
 

  providerId          Int 
  provider            Users @relation("Provider",fields: [providerId], references: [id]) // İlişki Tanımı

  providerInstId      Int 
  providerIns         Institutions @relation("ProviderIns",fields: [providerInstId], references: [id]) // İlişki Tanımı
  
  isgMemberId         Int
  isgMember           IsgMembers @relation(fields: [isgMemberId], references: [id]) // İlişki Tanımı

  details             String


  MaintenanceCards MaintenanceCards[]

  Notifications Notifications[]
}

//İSG Uzmanları
model IsgMembers {
  id                  Int @id @default(autoincrement())
  isgNumber           Int
  name                String
  contractDate        DateTime
  institutionId       Int 
  institution         Institutions @relation(fields: [institutionId], references: [id]) // İlişki Tanımı 
  


  Devices Devices[]
}

//Güvenlik Önlemi Türleri Yangın Tüpü - Sprinkler - Kağı - Alarm Sistemi vs 
model DeviceTypes {
  id                  Int @id @default(autoincrement())
  name                String


  Devices Devices[]

  MaintenanceCards MaintenanceCards[]

  Notifications Notifications[]
}

//Güvenlik Önlemi Özellikleri CO2 - KKT - Otomatik Kapı
model DeviceFeatures {
  id                  Int @id @default(autoincrement())
  name                String


  Devices Devices[]

  MaintenanceCards MaintenanceCards[]
}

//Bakım Kartı her bir cihaz için ve kimin kime yaptığını tutacak
model MaintenanceCards {
  id                  Int @id @default(autoincrement())
  maintenanceDate     DateTime @default (now())
  nextMaintenanceDate DateTime

  typeId              Int //yapılan bakımın türü Services tablosundan
  type                Services @relation(fields: [typeId], references: [id]) // İlişki Tanımı
  
  deviceId            Int
  device              Devices @relation(fields: [deviceId], references: [id]) // İlişki Tanımı

  deviceTypeId        Int
  deviceType          DeviceTypes @relation(fields: [deviceTypeId], references: [id]) // İlişki Tanımı

  deviceFeatureId     Int
  deviceFeature       DeviceFeatures @relation(fields: [deviceFeatureId], references: [id]) // İlişki Tanımı

  providerId          Int 
  provider             Users @relation("Provider", fields: [providerId], references: [id]) // İlişki Tanımı

  providerInsId       Int
  providerIns         Institutions @relation("ProviderIns", fields: [providerInsId], references: [id]) // İlişki Tanımı

  customerId          Int 
  customer            Users @relation("Customer", fields: [customerId], references: [id]) // İlişki Tanımı

  customerInsId       Int
  customerIns         Institutions @relation("CustomerIns", fields: [customerInsId], references: [id]) // İlişki Tanımı
  
  operations          Operations[] //burayı bi düşün  
  details             String
}

//Bakım sırasında kontrol edilen şeyler bunları Serkan yazacak 15-20 tane
model Operations {
  id                  Int @id @default(autoincrement())
  name                String

  MaintenanceCards    MaintenanceCards[] //burayı bi düşün
}


//Teklifte sunulan hizmetin başlıkları Örneğin Rutin Bakım, Eğitim, Danışmanlık, Ürün Satışı gibi
model Services {
  id                  Int @id @default(autoincrement())
  name                String

  OfferCards OfferCards[]

  MaintenanceCards MaintenanceCards[]
}

//Teklif Kartı, kim tarafından kime verilmiş tüm detayları tutyor
model OfferCards {
  id                  Int @id @default(autoincrement())
  offerDate           DateTime @default (now())
  validityDate        DateTime
  unitPrice           Decimal
  size                Decimal
  amount              Decimal

  paymentTermId       Int
  paymentTerm         PaymentTermTypes @relation(fields: [paymentTermId], references: [id]) // İlişki Tanımı

  servicesId          Int
  service             Services @relation(fields: [servicesId], references: [id]) // İlişki Tanımı

  status              OfferStatus

  creatorId           Int
  creator             Users @relation("Creator", fields: [creatorId], references: [id]) // İlişki Tanımı

  creatorInsId        Int
  creatorIns          Institutions @relation("CreatorIns", fields: [creatorInsId], references: [id]) // İlişki Tanımı

  recipientId         Int
  recipient           Users @relation("Recipient", fields: [recipientId], references: [id]) // İlişki Tanımı

  recipientInsId      Int
  recipientIns        Institutions @relation("RecipientIns", fields: [recipientInsId], references: [id]) // İlişki Tanımı

  details             String
}

//Teklif kartındaki ödeme türleri peşin, 3 taksit, 6 taksit, çekle vs
model PaymentTermTypes {
  id                  Int @id @default(autoincrement())
  name                String

  OfferCards OfferCards[]
}

//Bildirimler
model Notifications {
  id                  Int @id @default(autoincrement())
  content             String

  creatorId           Int
  creator             Users @relation("NotCreator",fields: [creatorId], references: [id]) // İlişki Tanımı

  creatorInsId        Int
  creatorIns          Institutions @relation("NotCreatorIns",fields: [creatorInsId], references: [id]) // İlişki Tanımı
  
  recipientId         Int
  recipient           Users @relation("NotRecipient",fields: [recipientId], references: [id]) // İlişki Tanımı

  recipientInsId      Int
  recipientIns        Institutions @relation("NotRecipientIns",fields: [recipientInsId], references: [id]) // İlişki Tanımı         

  notificationDate    DateTime @default (now()) 
  isRead              NotificationStatus

  typeId              Int
  type                NotificationTypes @relation(fields: [typeId], references: [id]) // İlişki Tanımı

  deviceId            Int
  device              Devices @relation(fields: [deviceId], references: [id]) // İlişki Tanımı

  deviceTypeId        Int
  deviceType          DeviceTypes @relation(fields: [deviceTypeId], references: [id]) // İlişki Tanımı
}

//Bildirim Türleri Hatırlatma Uyarı vs
model NotificationTypes {
  id                  Int @id @default(autoincrement())
  name                String

  Notifications Notifications[]
}

//Servis sağlayıcı tarafından oluşturulan bir randevu
model Appointments {
  id                  Int @id @default(autoincrement())
  tittle              String
  content             String
  start               DateTime
  end                 DateTime
  create              DateTime @default (now())

  creatorId           Int
  creator             Users @relation("AppCreator", fields: [creatorId], references: [id]) // İlişki Tanımı

  creatorInsId        Int
  creatorIns          Institutions @relation("AppCreatorIns", fields: [creatorInsId], references: [id]) // İlişki Tanımı

  recipientId         Int
  recipient           Users @relation("AppRecipient", fields: [recipientId], references: [id]) // İlişki Tanımı

  recipientInsId      Int
  recipientIns        Institutions @relation("AppRecipientIns", fields: [recipientInsId], references: [id]) // İlişki Tanımı
}

// Loglar
model Logs {
  id                  Int @id @default(autoincrement())
  date                DateTime @default (now())

  userId              Int
  user                Users @relation(fields: [userId], references: [id]) // İlişki Tanımı

  actionId            Int
  action              Actions @relation(fields: [actionId], references: [id]) // İlişki Tanımı

  tableId             Int
  table               Tables @relation(fields: [tableId], references: [id]) // İlişki Tanımı

  IP                  String
}



//Log sırasında yapılan işlem türleri ekle-sil-düzenle vs
model Actions {
  id                 Int @id @default(autoincrement())
  name               String

  Logs Logs[]
}


//Tüm tablolar
model Tables {
  id                 Int @id @default(autoincrement())
  name               String

  Logs Logs[]
}

//Duyurular  
model Announcements {
  id                 Int @id @default(autoincrement())
  title              String
  description        String
  date               DateTime
  creatorId          Int
  creator            Users @relation("AnnCreator", fields: [creatorId], references: [id]) // İlişki Tanımı

  creatorInsId       Int
  creatorIns         Institutions @relation("AnnCreatorIns", fields: [creatorInsId], references: [id]) // İlişki Tanımı

  recipientId        Int 
  recipient          Users @relation("AnnRecipient", fields: [recipientId], references: [id]) // İlişki Tanım

  recipientInsId     Int
  recipientInst      Institutions @relation("AnnRecipientInst", fields: [recipientInsId], references: [id]) // İlişki Tanımı
}

model Teams {
  id                 Int @id @default(autoincrement())
  name               String
  TeamsMemebers TeamsMemebers[]
}

model TeamsMemebers {
  id                  Int @id @default(autoincrement())
  firstName           String
  lastName            String
  bloodType           UserBloodType
  birthday            DateTime
  sex                 UserSex
  photo               String?
  email               String
  phone               String
  registrationDate    DateTime @default (now())
  institutionId       Int 
  Teams               Teams[]
}

enum UserSex {
  Erkek
  Kadin
  Diger
}

enum UserBloodType {
  ARhP
  ARhN
  BRhP
  BRhN
  ABRhP
  ABRhN
  ORhP
  ORhN
}

enum DeviceStatus {
  Aktif
  Pasif
}

enum OfferStatus {
  Onaylandi
  Red
  Beklemede
}

enum NotificationStatus {
  Okundu
  Okunmadi
}