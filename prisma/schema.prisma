

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Users {
  id                  Int @id @default(autoincrement())
  userName            String @unique
  password            String
  firstName           String
  lastName            String
  bloodType           UserBloodType
  birthday            DateTime
  sex                 UserSex
  photo               String?
  email               String
  phone               String
  registrationDate    DateTime @default (now())
  
  institutionId       Int
  institution         Institutions @relation(fields: [institutionId], references: [id])

  roleId              Int 
  role                Roles @relation(fields: [roleId], references: [id])

  MaintenanceCards MaintenanceCards[]

  OfferCards OfferCards[] @relation(name: "user1")


  Devices Devices[]

  Notifications Notifications[] @relation(name: "user1")

  Notifications1 Notifications[] @relation(name: "user2")

  Appointments Appointments[] @relation(name: "user1")

  Appointments1 Appointments[] @relation(name: "user2")

  Logs Logs[]
}

model Institutions {
  id                  Int @id @default(autoincrement())
  name                String
  address             String
  events              Events []
  announcements       Announcements []

  Users               Users[]

  TeamsMemebers       TeamsMemebers[]

  Devices Devices[]

  OfferCards OfferCards[] @relation(name: "user2")
}

model Roles {
  id                  Int @id @default(autoincrement())
  name                String

  Users Users[]
}

model Devices {
  id                  Int @id @default(autoincrement())
  serialNumber        String @unique
  qrcode              String @unique
  productionDate      DateTime
  lastControlDate     DateTime
  expirationDate      DateTime
  location            String
  photo               String?
  currentStatus       DeviceStatus

  typeId              Int
  type                DeviceTypes @relation(fields: [typeId], references: [id]) 

  featureId           Int
  feature             DeviceFeatures @relation(fields: [featureId], references: [id])

  ownerId             Int 
  owner               Users @relation(fields: [ownerId], references: [id])

  institutionId       Int 
  institution         Institutions @relation(fields: [institutionId], references: [id])
  
  details             String

  MaintenanceCards    MaintenanceCards[]
}

model DeviceTypes {
  id                  Int @id @default(autoincrement())
  name                String

  Devices             Devices[]
}

model DeviceFeatures {
  id                  Int @id @default(autoincrement())
  name                String

  Devices             Devices[]
}

model MaintenanceCards {
  id                  Int @id @default(autoincrement())
  maintenanceDate     DateTime @default (now())
  nextMaintenanceDate DateTime

  typeId              Int
  type                Services @relation(fields: [typeId], references: [id])

  deviceId            Int
  device              Devices @relation(fields: [deviceId], references: [id])

  providerId          Int 
  provider            Users @relation(fields: [providerId], references: [id])

  operations          Operations[]
            

  details             String

}

model Operations {
  id                  Int @id @default(autoincrement())
  name                String
  maintenanceCards    MaintenanceCards[]
}

model Services {
  id                  Int @id @default(autoincrement())
  name                String

  MaintenanceCards    MaintenanceCards[]

  OfferCards          OfferCards[]
}

model OfferCards {
  id                  Int @id @default(autoincrement())
  offerDate           DateTime @default (now())
  validityDate        DateTime
  unitPrice           Decimal
  size                Decimal
  amount              Decimal

  paymentTermId       Int
  paymentTerm         PaymentTermTypes @relation(fields: [paymentTermId], references: [id])

  servicesId          Int
  service             Services @relation(fields: [servicesId], references: [id])

  status              OfferStatus

  creatorId           Int
  creator             Users @relation(fields: [creatorId], references: [id], name: "user1")

  recipientId         Int
  recipient           Institutions @relation(fields: [recipientId], references: [id], name: "user2")

  details             String

  

}

model PaymentTermTypes {
  id                  Int @id @default(autoincrement())
  name                String

  OfferCards          OfferCards[]
}

model Notifications {
  id                  Int @id @default(autoincrement())
  content             String

  creatorId           Int
  creator             Users @relation(fields: [creatorId], references: [id], name: "user1")

  recipientId         Int
  recipient           Users @relation(fields: [recipientId], references: [id], name: "user2")

  notificationDate    DateTime @default (now()) 
  isRead              NotificationStatus

  typeId              Int
  type                NotificationTypes @relation(fields: [typeId], references: [id])
}

model NotificationTypes {
  id                  Int @id @default(autoincrement())
  name                String

  Notifications       Notifications[]
}

model Appointments {
  id                  Int @id @default(autoincrement())
  tittle              String
  content             String
  start               DateTime
  end                 DateTime
  create              DateTime @default (now())

  creatorId           Int
  creator             Users @relation(fields: [creatorId], references: [id], name: "user1")

  recipientId         Int
  recipient           Users @relation(fields: [recipientId], references: [id], name: "user2")

}

model Logs {
  id                  Int @id @default(autoincrement())
  date                DateTime @default (now())

  userId              Int
  user                Users @relation(fields: [userId], references: [id])

  actionId            Int
  action              Actions @relation(fields: [actionId], references: [id])

  tableId             Int
  table               Tables @relation(fields: [tableId], references: [id])

  IP                  String
}

model Actions {
  id                 Int @id @default(autoincrement())
  name               String

  Logs Logs[]
}

model Tables {
  id                 Int @id @default(autoincrement())
  name               String

  Logs Logs[]
}

model Events {
  id                 Int @id @default(autoincrement())
  title              String
  description        String
  startTime          DateTime
  endTime            DateTime
  institutionId      Int
  institution        Institutions @relation(fields: [institutionId], references: [id])

}

model Announcements {
  id                 Int @id @default(autoincrement())
  title              String
  description        String
  date               DateTime
  institutionId      Int
  institution        Institutions @relation(fields: [institutionId], references: [id])
}

model Teams {
  id                 Int @id @default(autoincrement())
  name               String
  teamsMemebers      TeamsMemebers []
}

model TeamsMemebers {
  id                  Int @id @default(autoincrement())
  teams               Teams []
  firstName           String
  lastName            String
  bloodType           UserBloodType
  birthday            DateTime
  sex                 UserSex
  photo               String?
  email               String
  phone               String
  registrationDate    DateTime @default (now())
  
  institutionId       Int
  institution         Institutions @relation(fields: [institutionId], references: [id])
}

enum UserSex {
  Erkek
  Kadin
  Diger
}

enum UserBloodType {
  ARhP
  ARhN
  BRhP
  BRhN
  ABRhP
  ABRhN
  ORhP
  ORhN
}

enum DeviceStatus {
  Aktif
  Pasif
}

enum OfferStatus {
  Onaylandi
  Red
  Beklemede
}

enum NotificationStatus {
  Okundu
  Okunmadi
}